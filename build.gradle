buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.+'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 21
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task);
}

repositories {
    jcenter()
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

apply plugin: 'maven'

group = project.GROUP
version = project.VERSION
description = project.DESCRIPTION

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

/*
task testsJar(type: Jar) {
    classifier = 'tests'
    from android.sourceSets.test.output
}
*/

def hasBintrayProperties() {
    return project.hasProperty('BINTRAY_USERNAME') && project.hasProperty('BINTRAY_KEY')
}

if (hasBintrayProperties()) {
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    bintrayUpload.dependsOn sourcesJar, javadocJar, assemble
    bintrayUpload.dependsOn("generatePomFileForMavenPublication")

    publish.dependsOn sourcesJar, javadocJar, assemble
    publish.dependsOn("generatePomFileForMavenPublication")

    publishing {
        publications {
            maven(MavenPublication) {
                artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"
                artifact sourcesJar
                artifact javadocJar

                pom.withXml {
                    def Node root = asNode()
                    root.appendNode('name', project.BINTRAY_NAME)
                    root.appendNode('description', project.description)
                    root.appendNode('url', project.URL)

                    def issues = root.appendNode('issueManagement')
                    issues.appendNode('system', 'github')
                    issues.appendNode('url', project.ISSUES_URL)

                    def scm = root.appendNode('scm')
                    scm.appendNode('url', project.SCM)
                    scm.appendNode('connection', project.CONNECTION)
                    scm.appendNode('developerConnection', project.DEV_CONNECTION)

                    def license = root.appendNode('licenses').appendNode('license')
                    license.appendNode('name', 'MIT')
                    license.appendNode('url', 'http://opensource.org/licenses/mit-license.php')
                    license.appendNode('distribution', 'repo')

                    def dev = root.appendNode('developers').appendNode('developer')
                    dev.appendNode('id', project.ORG)
                    dev.appendNode('name', project.ORG)
                    dev.appendNode('organization', project.ORG)
                    dev.appendNode('organizationUrl', project.ORG_URL)
                }
            }

        }
    }

    bintray {
        user = BINTRAY_USERNAME
        key = BINTRAY_KEY
        publications = ['maven']
        publish = true
        pkg {
            repo = 'maven'
            name = project.BINTRAY_NAME
            desc = project.description
            websiteUrl = project.URL
            issueTrackerUrl = project.ISSUES_URL
            vcsUrl = project.SCM
            licenses = ['MIT']
            labels = []
            publicDownloadNumbers = true
            version {
                name = project.version
                desc = project.description
            }
        }
    }
}
